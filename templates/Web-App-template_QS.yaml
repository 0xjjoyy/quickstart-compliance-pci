---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides nesting for required stacks to deploy a full sample web application
  with reverse proxy, ELBs, IAM, and other resources (for demonstration/POC/testing)
  QS(0018)
Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20190715
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB
      name and password
  Output:
    Description: Outputs ID of all deployed resources
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Region Config
      Parameters:
      - pRegionAZ1Name
      - pRegionAZ2Name
    - Label:
        default: Network (existing VPC config)
      Parameters:
      - pProductionCIDR
      - pProductionVPC
      - pDMZSubnetA
      - pDMZSubnetB
      - pAppPrivateSubnetA
      - pAppPrivateSubnetB
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      pProductionCIDR:
        default: CIDR Range of VPC
      pProductionVPC:
        default: CIDR Range of VPC
      pDMZSubnetA:
        default: Choose 1 of 2 Subnets for Proxy Server
      pDMZSubnetB:
        default: Choose 2 of 2 Subnets for Proxy Server
      pAppPrivateSubnetA:
        default: Choose 1 of 2 Subnets for App Server
      pAppPrivateSubnetB:
        default: Choose 2 of 2 Subnets for App Server
      pRegionAZ1Name:
        default: Choose 1 of 2 Availability Zones for deployment
      pRegionAZ2Name:
        default: Choose 2 of 2 Availability Zones for deployment
      ESClusterARN:
        default: Amazon ElasticSearch Cluster
      pEC2KeyPair:
        default: EC2 Key Pair for Deployed Resources
      pManagementCIDR:
        default: CIDR Range or IP to Allow Access to the Web/Application Servers
      rCentralLogBucket:
        default: Centalized Logging Bucket to Store AWS WAF Logs
      WAFlogging:
        default: Choose to Send Logs to Amazon S3 or Amazon S3 and Amazon ElasticSearch

Parameters:

  WAFlogging:
    Type: String
    Description: You can deploy this stack to have WAF logs streamed to Amazon ES (current region) and your centralized log bucket or just log to Amazon S3.
    AllowedValues:
      - Amazon Elasticsearch_S3
      - Amazon S3 Only
    Default: Amazon S3 Only
  ESClusterARN:
    Type: String
    Description: (If Amazon ElasticSearch_S3 is chosen) The Amazon Resource Name (ARN) of the Amazon Elasticsearch domain that Kinesis Data Firehose delivers data to. Must be in same account/region.
    Default: ''
  rCentralLogBucket:
    Type: String
    Description: The Amazon S3 bucket to send AWS WAF logs. This bucket should already exist.
    Default: ''
  pEC2KeyPair:
    Description: The SSH key pair in your account to use for all other EC2 instance
      logins
    Type: AWS::EC2::KeyPair::KeyName
  pProductionCIDR:
    Description: Production VPC CIDR
    Type: String
    Default: 10.100.0.0/16
  pManagementCIDR:
    Description: Management VPC CIDR
    Type: String
    Default: 10.10.0.0/16
  pProductionVPC:
    Description: Production VPC
    Type: AWS::EC2::VPC::Id
  pRegionAZ1Name:
    Description: AvailabilityZone 1
    Type: AWS::EC2::AvailabilityZone::Name
  pRegionAZ2Name:
    Description: AvailabilityZone 2
    Type: AWS::EC2::AvailabilityZone::Name
  pDMZSubnetA:
    Description: DMZ Subnet A
    Type: AWS::EC2::Subnet::Id
  pDMZSubnetB:
    Description: DMZ Subnet B
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetA:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetB:
    Description: WebApp Subnet B
    Type: AWS::EC2::Subnet::Id

  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or
      end with a hyphen (-). If you are unsure, do not change this value.
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-). If you are unsure, do not change this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-compliance-pci/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Mappings:
  elbMap:
    ap-northeast-1:
      ELB: '582318560864'
    ap-northeast-2:
      ELB: '600734575887'
    ap-south-1:
      ELB: '718504428378'
    ap-southeast-1:
      ELB: '114774131450'
    ap-southeast-2:
      ELB: '783225319266'
    ca-central-1:
      ELB: '985666609251'
    eu-central-1:
      ELB: '054676820928'
    eu-west-1:
      ELB: '156460612806'
    eu-west-2:
      ELB: '652711504416'
    sa-east-1:
      ELB: '507241528517'
    us-east-1:
      ELB: '127311923021'
    us-east-2:
      ELB: '033677994240'
    us-gov-west-1:
      ELB: '048591011584'
    us-west-1:
      ELB: '027434742980'
    us-west-2:
      ELB: '797873946194'
#updated with Amazon Linux 2 -2019
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn2-ami-hvm-2.0.20190618-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-0c3fd0f5d33134a76
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    ap-northeast-2:
      AMZNLINUXHVM: ami-095ca789e0549777d
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    ap-south-1:
      AMZNLINUXHVM: ami-0d2692b6acea72ee6
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    ap-southeast-1:
      AMZNLINUXHVM: ami-0dc96254d5535925f
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    ap-southeast-2:
      AMZNLINUXHVM: ami-05067171f4230ac41
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    ca-central-1:
      AMZNLINUXHVM: ami-0d4ae09ec9361d8ac
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    eu-central-1:
      AMZNLINUXHVM: ami-0cc293023f983ed53
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    eu-west-1:
      AMZNLINUXHVM: ami-0bbc25e23a7640b9b
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    eu-west-2:
      AMZNLINUXHVM: ami-0d8e27447ec2c8410
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    sa-east-1:
      AMZNLINUXHVM: ami-058943e7d9b9cabfb
      InstanceType: m4.large
      InstanceTypeDatabase: db.m3.large
    us-east-1:
      AMZNLINUXHVM: ami-0b898040803850657
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    us-east-2:
      AMZNLINUXHVM: ami-0d8f6eb4f641ef691
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    us-gov-west-1:
      AMZNLINUXHVM: ami-e9a9d388
      InstanceType: m4.large
      InstanceTypeDatabase: db.m3.large
    us-west-1:
      AMZNLINUXHVM: ami-056ee704806822732
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
    us-west-2:
      AMZNLINUXHVM: ami-082b5a644766e0e6f
      InstanceType: m4.large
      InstanceTypeDatabase: db.m4.large
Conditions:
  GovCloudCondition:
    !Equals
    - !Ref AWS::Region
    - us-gov-west-1
Resources:
  rSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-reverse-proxy-dmz
  rSecurityGroupWebInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy Instances in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !Ref pProductionCIDR
      Tags:
      - Key: Name
        Value: sg-reverse-proxy-dmz-instances
  rSecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appservers ELB
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-app-server-elb
  rSecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref pProductionCIDR
      Tags:
      - Key: Name
        Value: sg-app-server-elb-instances

  rWebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
        - Id: Transition90daysRetain7yrs
          Status: Enabled
          ExpirationInDays: 2555
          Transition:
            TransitionInDays: 90
            StorageClass: STANDARD_IA
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
  rWebContentS3Policy:
    Type: AWS::S3::BucketPolicy
    DependsOn: rWebContentBucket
    Properties:
      Bucket: !Ref rWebContentBucket
      PolicyDocument:
        Statement:
        - Sid: EnforceSecureTransport
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource:
            !Sub
            - arn:${Partition}:s3:::${rWebContentBucket}
            - Partition:
                !If
                - GovCloudCondition
                - aws-us-gov
                - aws
          Condition:
            Bool:
              aws:SecureTransport: 'false'
        - Sid: EnforceEncryptionOnPut
          Effect: Deny
          Principal: '*'
          Action: s3:PutObject
          Resource:
            !Sub
            - arn:${Partition}:s3:::${rWebContentBucket}/*
            - Partition:
                !If
                - GovCloudCondition
                - aws-us-gov
                - aws
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256

  rELBApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
    - rSecurityGroupApp
    Properties:
      Subnets:
      - !Ref pAppPrivateSubnetA
      - !Ref pAppPrivateSubnetB
      SecurityGroups:
      - !Ref rSecurityGroupApp
      Scheme: internal
      Type: application
      Tags:
      - Key: Name
        Value: ProxyELB

  rELBappHTTPlistener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
    DefaultActions:
      - Type: "redirect"
        RedirectConfig:
          Protocol: "HTTPS"
          Port: "443"
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: "HTTP_301"
    Port: 80
    Protocol: "HTTP"
    LoadBalancerArn: !Ref rELBApp

  rELBWeb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
    - rSecurityGroupWeb
    Properties:
      Subnets:
      - !Ref pDMZSubnetA
      - !Ref pDMZSubnetB
      SecurityGroups:
      - !Ref rSecurityGroupWeb
      Type: application
      Tags:
      - Key: Name
        Value: Proxy ELB
  rELBwebHTTPlistener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
    DefaultActions:
      - Type: "redirect"
        RedirectConfig:
          Protocol: "HTTPS"
          Port: "443"
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: "HTTP_301"
    Port: 80
    Protocol: "HTTP"
    LoadBalancerArn: !Ref rELBWeb

  rWebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Assets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: DescribeVolumes
            Effect: Allow
            Action:
            - ec2:DescribeVolumes
            Resource: "*"
  rWebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rWebInstanceRole
  rAutoScalingConfigWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - rELBApp
    - rAutoScalingGroupApp
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                  listen 80;
                  charset utf-8;
                  location / {
                    resolver xxxxx;
                    set $elb 'https://${rELBApp.DNSName}';
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_redirect off;
                    proxy_pass $elb;
                  }
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            01-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                sudo amazon-linux-extras install nginx1.12
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sudo sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                sudo cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                sudo systemctl stop nginx
                sudo sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                sudo systemctl restart nginx
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                - /etc/nginx/conf.d/default.conf

    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - AMZNLINUXHVM
      IamInstanceProfile: !Ref rWebInstanceProfile
      InstanceType:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - InstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdh
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
      - !Ref rSecurityGroupWebInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

          ######################################################################
          # Volume /dev/sdh (which will get created as /dev/xvdh on Amazon Linux)

          DATA_STATE="unknown"
          until [ "${!DATA_STATE}" == "attached" ]; do
            DATA_STATE=$(aws ec2 describe-volumes \
            --region ${AWS::Region} \
            --filters \
                  Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                  Name=attachment.device,Values=/dev/sdh \
            --query Volumes[].Attachments[].State \
            --output text)

            sleep 5
          done

          # Format /dev/xvdh if it does not contain a partition yet
          if [ "$(file -b -s /dev/xvdh)" == "data" ]; then
            mkfs -t ext4 /dev/xvdh
          fi

          mkdir -p /data
          mount /dev/xvdh /data

          # Persist the volume in /etc/fstab so it gets mounted again
          echo '/dev/xvdh /data ext4 defaults,nofail 0 2' >> /etc/fstab

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigWeb --region ${AWS::Region}

          ## Nginx setup
          sleep 5
          cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
          service nginx stop
          sed -i '/default_server;/d' /etc/nginx/nginx.conf
          sleep 10
          service nginx restart
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref pProductionVPC
      TargetType: instance
      Port: 80
      Protocol: HTTP
      Name: WebTGroup

  rAutoScalingGroupWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigWeb
    Properties:
      AvailabilityZones:
      - !Ref pRegionAZ1Name
      - !Ref pRegionAZ2Name
      VPCZoneIdentifier:
      - !Ref pDMZSubnetA
      - !Ref pDMZSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigWeb
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
      - !Ref WebTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: Proxy Server
        PropagateAtLaunch: true
  rAutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: 1
  rAutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: -1

  rAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Assets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: DescribeVolumes
            Effect: Allow
            Action:
            - ec2:DescribeVolumes
            Resource: "*"
  rAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rAppInstanceRole
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingGroupApp --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf


        install_wordpress:
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                /**
                 * The base configuration for WordPress
                 *
                 * The wp-config.php creation script uses this file during the
                 * installation. You don't have to use the web site, you can
                 * copy this file to "wp-config.php" and fill in the values.
                 *
                 * This file contains the following configurations:
                 *
                 * * MySQL settings
                 * * Secret keys
                 * * Database table prefix
                 * * ABSPATH
                 *
                 * @link https://codex.wordpress.org/Editing_wp-config.php
                 *
                 * @package WordPress
                 */

                // ** MySQL settings - You can get this info from your web host ** //
                /** The name of the database for WordPress */
                define( 'DB_NAME', 'test' );

                /** MySQL database username */
                define( 'DB_USER', 'root' );

                /** MySQL database password */
                define( 'DB_PASSWORD', '' );

                /** MySQL hostname */
                define( 'DB_HOST', 'localhost' );

                /** Database Charset to use in creating database tables. */
                define( 'DB_CHARSET', 'utf8' );

                /** The Database Collate type. Don't change this if in doubt. */
                define( 'DB_COLLATE', '' );

                /**
                 * WordPress Database Table prefix.
                 *
                 * You can have multiple installations in one database if you give each
                 * a unique prefix. Only numbers, letters, and underscores please!
                 */
                $table_prefix = 'wp_';

                /**
                 * For developers: WordPress debugging mode.
                 *
                 * Change this to true to enable the display of notices during development.
                 * It is strongly recommended that plugin and theme developers use WP_DEBUG
                 * in their development environments.
                 *
                 * For information on other constants that can be used for debugging,
                 * visit the Codex.
                 *
                 * @link https://codex.wordpress.org/Debugging_in_WordPress
                 */
                define( 'WP_DEBUG', true );
                define('WP_ALLOW_REPAIR', true);

                /* That's all, stop editing! Happy publishing. */

                /** Absolute path to the WordPress directory. */
                if ( ! defined( 'ABSPATH' ) ) {
                	define( 'ABSPATH', dirname( __FILE__ ) . '/' );
                }

                /** Sets up WordPress vars and included files. */
                require_once( ABSPATH . 'wp-settings.php' );

              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - AMZNLINUXHVM
      IamInstanceProfile: !Ref rAppInstanceProfile
      InstanceType:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - InstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdh
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -x

            yum update -y

            sudo amazon-linux-extras install php7.2
            sudo amazon-linux-extras install httpd_modules
            sudo yum install -y httpd mariadb-server
            sudo amazon-linux-extras install lamp-mariadb10.2-php7.2
            sleep 5
            sudo systemctl start mariadb.service
            sudo systemctl enable mariadb.service

            EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

            ######################################################################
            # Volume /dev/sdh (which will get created as /dev/xvdh on Amazon Linux)

            DATA_STATE="unknown"
            until [ "${!DATA_STATE}" == "attached" ]; do
              DATA_STATE=$(aws ec2 describe-volumes \
              --region ${AWS::Region} \
              --filters \
                    Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                    Name=attachment.device,Values=/dev/sdh \
              --query Volumes[].Attachments[].State \
              --output text)

              sleep 5
            done

            # Format /dev/xvdh if it does not contain a partition yet
            if [ "$(file -b -s /dev/xvdh)" == "data" ]; then
              mkfs -t ext4 /dev/xvdh
            fi

            mkdir -p /data
            mount /dev/xvdh /data

            # Persist the volume in /etc/fstab so it gets mounted again
            echo '/dev/xvdh /data ext4 defaults,nofail 0 2' >> /etc/fstab

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigApp --configsets wordpress_install --region ${AWS::Region}

            ######################################################################
            #     NOTE: UPDATE THESE VALUES ACCORDING TO THE COMPLIANCE BODY     #
            ######################################################################
            LANDING_PAGE="/var/www/html/landing.html"
            COMPLIANCE_BODY_LABEL="PCI DSS"
            COMPLIANCE_SURVEY_LINK="pci"
            COMPLIANCE_MATRIX_FILENAME="PCI-DSS3.2.1-Security-Controls-Mapping.xlsx"
            ######################################################################

            # Download the landing page.
            sudo wget https://cloudformationlctemplates.s3.amazonaws.com/landing.html -O $LANDING_PAGE

            # Replace relative image links with links to the production S3 source.
            sudo sed -i 's|images|https://cloudformationlctemplates.s3.amazonaws.com/images|g' $LANDING_PAGE

            # Inject the landing page branding label.
            sudo sed -i "s|{compliance-body}|$COMPLIANCE_BODY_LABEL|g" $LANDING_PAGE

            # Inject the survey link parameter.
            sudo sed -i "s|{compliance-body-survey-link}|$COMPLIANCE_SURVEY_LINK|g" $LANDING_PAGE

            # Inject the security control matrix file location.
            sudo sed -i "s|{compliance-body-matrix}|https://cloudformationlctemplates.s3.amazonaws.com/$COMPLIANCE_MATRIX_FILENAME|g" $LANDING_PAGE
          - QSS3Region:
              !If
              - GovCloudCondition
              - s3-us-gov-west-1
              - s3
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref pProductionVPC
      TargetType: instance
      Port: 80
      Protocol: HTTP
      Name: AppTGroup
  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      AvailabilityZones:
      - !Ref pRegionAZ1Name
      - !Ref pRegionAZ2Name
      VPCZoneIdentifier:
      - !Ref pAppPrivateSubnetA
      - !Ref pAppPrivateSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigApp
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
        - !Ref AppTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: AppServer
        PropagateAtLaunch: true
        PropagateAtLaunch: true
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: 1
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: -1
  WAFtemplateOWASP:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - rELBWeb
    Properties:
      TemplateURL: https://cloudformationlctemplates.s3.amazonaws.com/AWS+WAF_OWASP_log.yaml
      TimeoutInMinutes: 20
      Parameters:
        pELBWeb: !Ref rELBWeb
        pESClusterARN: !Ref ESClusterARN
        pCentralLogBucket: !Ref rCentralLogBucket
        pWAFLogging: !Ref WAFlogging


  rPostProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - waf-regional.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: PostProcPermissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: UploadServerCertificate
            Effect: Allow
            Action:
            - iam:ListServerCertificates
            - iam:UploadServerCertificate
            - iam:CreateServiceLinkedRole
            Resource: "*"
          - Sid: CreateLoadBalancerListener
            Effect: Allow
            Action:
            - elasticloadbalancing:*
            Resource: "*"
          - Sid: SelfDestruct
            Effect: Allow
            Action:
            - ec2:TerminateInstances
            Resource: "*"
          - Sid: WAFListACL
            Effect: Allow
            Action:
            - waf-regional:ListWebACLs
            - waf-regional:ListLoggingConfigurations
            - waf-regional:PutLoggingConfiguration
            Resource: "*"
  rPostProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rPostProcInstanceRole
  rPostProcInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - rAutoScalingGroupApp
    - rAutoScalingGroupWeb
    Properties:
      ImageId:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - AMZNLINUXHVM
      InstanceType:
        !FindInMap
           - AWSAMIRegionMap
           - !Ref AWS::Region
           - InstanceType
      IamInstanceProfile: !Ref rPostProcInstanceProfile
      SubnetId: !Ref pAppPrivateSubnetA
      KeyName: !Ref pEC2KeyPair
      SecurityGroupIds:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          set -x
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          echo Configure the region, necessary especially for GovCloud
          aws configure set region ${AWS::Region}

          echo Determine whether a certificate needs to be generated
          cert_arn=$(aws iam list-server-certificates --query 'ServerCertificateMetadataList[?ServerCertificateName==`non-production-testing-server-cert`].Arn' --output text)
          if [[ $(echo "$cert_arn" | grep "non-production-testing-server-cert") != *"non-production-testing-server-cert"* ]]; then
            echo *** Beginnning ELB HTTPS configuration ***
            echo Generating private key...
            openssl genrsa -out /tmp/my-private-key.pem 2048
            echo Creating CSR
            openssl req -sha256 -new -key /tmp/my-private-key.pem -out /tmp/csr.pem -subj "/C=US/ST=Washington/L=Seattle/O=NonProductionTestCert/CN=NonProductionTestCert"
            echo Self-signing certificate...
            openssl x509 -req -days 365 -in /tmp/csr.pem -signkey /tmp/my-private-key.pem -out /tmp/my-certificate.pem
            openssl rsa -in /tmp/my-private-key.pem -outform PEM
            echo Converting private key...
            openssl x509 -inform PEM -in /tmp/my-certificate.pem
            echo Uploading key to AWS IAM and saving ARN to environment variable...
            cert_arn=$(aws iam upload-server-certificate --server-certificate-name non-production-testing-server-cert --query 'ServerCertificateMetadata.Arn' --output text --certificate-body file:///tmp/my-certificate.pem --private-key file:///tmp/my-private-key.pem)
            webTG_arn=$(aws elbv2 describe-target-groups --name WebTGroup --query 'TargetGroups[].TargetGroupArn' --region ${AWS::Region} --output text)
            appTG_arn=$(aws elbv2 describe-target-groups --name AppTGroup --query 'TargetGroups[].TargetGroupArn' --region ${AWS::Region} --output text)
            echo Sleeping so IAM can propogate the certificate...
            sleep 10
            echo Removing key files...
            rm /tmp/*.pem
          fi
          webTG_arn=$(aws elbv2 describe-target-groups --name WebTGroup --query 'TargetGroups[].TargetGroupArn' --output text)
          appTG_arn=$(aws elbv2 describe-target-groups --name AppTGroup --query 'TargetGroups[].TargetGroupArn' --output text)
          echo Creating ELB HTTPS listener using the cert stored in the environment variable...
          aws elbv2 create-listener --load-balancer-arn ${rELBWeb} --protocol HTTPS --port 443 --certificates CertificateArn=$cert_arn --default-actions Type=forward,TargetGroupArn=$webTG_arn --region ${AWS::Region}
          aws elbv2 create-listener --load-balancer-arn ${rELBApp} --protocol HTTPS --port 443 --certificates CertificateArn=$cert_arn --default-actions Type=forward,TargetGroupArn=$appTG_arn --region ${AWS::Region}

          echo Sleeping for 1.5 minutes to allow CloudFormation to catch up
          sleep 90
          webACL_id=$(aws waf-regional list-web-acls --query 'WebACLs[].WebACLId' --output text)
          aws waf-regional put-logging-configuration --logging-configuration ResourceArn=arn:aws:waf-regional:${AWS::Region}:${AWS::AccountId}:webacl/$webACL_id,LogDestinationConfigs=arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-waf-logs-analytics,RedactedFields=[] --region ${AWS::Region}
          sleep 10
          echo Self-destruct!
          aws ec2 terminate-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
          echo *** ELB HTTPS configuration complete ***

      Tags:
      - Key: Name
        Value: PostProcessor
Outputs:
  LandingPageURL:
    Value: !Sub https://${rELBWeb.DNSName}/landing.html
    Description: Landing Page
  WebsiteURL:
    Value: !Sub https://${rELBWeb.DNSName}/wordpress/wp-admin/install.php
    Description: WordPress Website (demonstration purposes only)
  rSecurityGroupWeb:
    Value: !Ref rSecurityGroupWeb
  rSecurityGroupApp:
    Value: !Ref rSecurityGroupApp
  WebLoadBalancer:
    Value: !Ref rELBWeb
  SurveyLink:
    Description: Please take a moment to complete the survey by clicking this link
    Value: https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=${COMPLIANCE_SURVEY_LINK}
  Help:
    Description: For assistance or questions regarding this quickstart please email
      compliance-accelerator@amazon.com
    Value: ''
...
